snippet imp
  import ${1} from ${0}

snippet impr
  import React from 'react'

snippet constf
  const ${0} = () => {
  }

snippet ret
  return (
    ${0}
  )

snippet expd
  export default ${0}

snippet expc
  export const ${0}

snippet switch
  switch (${1}) {
    case:
      break;
    default:
      return
  }

snippet if
  if ${1} {
    ${0}
  }

snippet log
  console.log(${0})

snippet desc
  describe('${1}', () => {
    ${0}
  })

snippet test
  test('${1}', () => {
    ${0}
  })

snippet befe
  beforeEach(() => {
    ${0}
  })

snippet afe
  afterEach(() => {
    ${0}
  })

snippet expect
  expect(${1}).toBe(${0})

snippet usee
  useEffect(() => {
    ${0}
  }, [])

snippet usec
  useCallback(() => {
    ${0}
  }, [])

snippet gss
  export const getServerSideProps = async ctx => {
    return {
      props: {}
    }
  }

snippet usem
  React.memo((${1}) => {
    ${0}
  })

snippet usecontext
  import React, { ReactNode, createContext, useContext } from 'react'

  interface I${1}Context {}

  const $1Context = createContext<I$1Context>(null!)

  export const $1Provider = ({ children }: { children: ReactNode }) => {
    return (
      <$1Context.Provider value={{}}>{children}</$1Context.Provider>
    )
  }

  const use$1Context = () => {
    const context = useContext($1Context)
    if (!context) {
      throw new Error(
        'use$1Context must be used within the $1Provider',
      )
    }
    return context
  }

  export default use$1Context

snippet usefcm
  import React, { memo } from 'react'

  const ${1}Raw = () => {
    return (
      <div>$1</div>
    )
  }

  export const $1 = memo($1Raw)

snippet sett
  setTimeout(() => {
    ${0}
  }, ${1})

snippet seti
  setInterval(() => {
    ${0}
  }, ${1})
