[
  {
    "text": "{\n  \"$schema\": \"https://biomejs.dev/schemas/2.2.0/schema.json\",\n  \"vcs\": { \"enabled\": true, \"clientKind\": \"git\", \"useIgnoreFile\": true },\n  \"files\": { \"ignoreUnknown\": true },\n  \"formatter\": {\n    \"enabled\": true,\n    \"indentStyle\": \"space\",\n    \"lineWidth\": 120,\n    \"lineEnding\": \"lf\",\n    \"indentWidth\": 2\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"a11y\": {\n        \"noSvgWithoutTitle\": \"off\"\n      },\n      \"correctness\": {\n        \"noUnusedImports\": \"warn\"\n      }\n    }\n  },\n  \"assist\": {\n    \"actions\": {\n      \"source\": {\n        \"organizeImports\": \"on\"\n      }\n    }\n  },\n  \"javascript\": {\n    \"formatter\": { \"quoteStyle\": \"single\", \"semicolons\": \"asNeeded\" }\n  }\n}",
    "name": "biome.json"
  },
  {
    "text": "claude mcp add <name> uvx --scope local -e ENV=XXX -- package@latest",
    "name": "claude mcp追加"
  },
  {
    "text": "{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Write|Edit|MultiEdit\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"jq -r '.tool_input.file_path | select(endswith(\\\".js\\\") or endswith(\\\".ts\\\") or endswith(\\\".jsx\\\") or endswith(\\\".tsx\\\"))' | xargs -r npx biome check --write\"\n          }\n        ]\n      }\n    ]\n  }\n}\n",
    "name": ".claude/settings.json"
  },
  {
    "text": "todoist sync && todoist l -f 'today | overdue' | awk '{title=\"\"; for(i=6;i<=NF;i++) {title=title $i \" \"} print $2, $3, title}' | sort",
    "name": "Todoist ls"
  },
  {
    "text": "todoist sync && todoist cl -f 'today' | awk '{title=\"\"; for(i=5;i<=NF;i++) {title=title $i \" \"} print $2, title}' | sort",
    "name": "Todoist completed"
  },
  {
    "text": "國結塾座学　8/14() 13:00\n國結塾稽古　8/14() 15:30\n國結塾互師互弟　8/14() 17:30\n結塾稽古　8/21() 11:00\n結塾互師互弟　8/21() 13:00\n國屋塾稽古　8/26() 13:00\n國屋塾互師互弟　8/26() 15:00",
    "name": "調整さん國屋"
  },
  {
    "text": "import react from '@vitejs/plugin-react'\nimport tsconfigPaths from 'vite-tsconfig-paths'\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  plugins: [tsconfigPaths(), react()],\n  test: {\n    environment: 'jsdom',\n    env: {\n      XXX: 'dummy',\n    },\n    globalSetup: './vitest-global-setup.ts',\n    restoreMocks: true,\n    clearMocks: true,\n  },\n})",
    "name": "vitest"
  },
  {
    "text": "$ npx serve home_dir\nindex.htmlではなく、その親ディレクトリを指定する",
    "name": "http serve"
  },
  { "text": "nbstripout --install", "name": "python" },
  {
    "text": "$ aws bedrock list-foundation-models --region us-west-2 \\\n--query \"modelSummaries[?inferenceTypesSupported].[modelName, modelArn, join(', ', inferenceTypesSupported)]\" \\\n--output table ",
    "name": "AWS CLI"
  },
  {
    "text": "# 32バイト（256ビット・64文字）のシークレット\n# HS256を使うなら最低限\nopenssl rand -hex 32",
    "name": "opensslによるランダム文字列"
  },
  {
    "text": "pnpm i neverthrow prisma @prisma/client reflect-metadata ts-pattern tsyringe zod date-fns",
    "name": "util pnpms"
  },
  {
    "text": "ssh dialbird@raspberrypi.local\n\n設定\nsudo raspi-config\n\nシャットダウン\nsudo poweroff",
    "name": "raspberry"
  },
  {
    "text": "use: remem\nmicrosoft password: wprlJYh9mOpkqQ4X",
    "name": "windowsへのssh"
  },
  {
    "text": "cp -r FEEEP-Resort/feeepapp01 .\ncp -r FEEEP-Resort/lp1/feeep_list lp1\ncp -r FEEEP-Resort/lp1/fb lp1\ncp -r FEEEP-Resort/lp1/ig lp1\n\nfor i in {01..05}; do for dir in gdisplayad glistad gremark; do rm -rf lp1/${dir}${i} && cp -r FEEEP-Resort/lp1/${dir}${i} lp1/; done; done\n\ncp FEEEP-Resort/root/index.html .\n\nfor i in {108..169}; do rm -rf lp1/metaad$i; cp -r FEEEP-Resort/lp1/metaad$i lp1; done\n\nfor i in {75..130}; do rm -rf lp4/metaad$i; cp -r FEEEP-Resort/lp4/metaad$i lp4; done\n\nfor i in {58..94}; do rm -rf lp9/metaad$i; cp -r FEEEP-Resort/lp9/metaad$i lp9; done\n\n\n",
    "name": "FEEEP Resort Deploy"
  },
  {
    "text": "Keisuke Playgroundのプロジェクトに作成\n\nAIzaSyCodiq7vFEOAFR8sSsr5hcNDm0REnWbD-4",
    "name": "Youtube Data API キー"
  },
  {
    "text": "# tar回答\ntar -xzf ./Build\\ Details\\ scoutee.tar.gz -C ScouteeSimApp\n\n# アプリアンインストール\nxcrun simctl uninstall booted com.dialbird.scoutee\n\n# アプリインストール\nxcrun simctl install booted ./ScouteeSimApp/Scoutee.app\n\n# 起動\nxcrun simctl launch booted com.dialbird.scoutee\n\n",
    "name": "xcrun"
  },
  {
    "text": "# flyにssh console\nfly ssh console -a n8n-selfhosted\n\n# flyと\nfly ssh sftp shell -a n8n-selfhosted\ncd /home/node/.n8n\n\n# tar\ntar xzf sasaki-ai-assets.tar.gz",
    "name": "fly"
  },
  {
    "text": "# mp4としてインストール\n$ yt-dlp 'https://XXX'\n\n# mp3だけ\n# yt-dlp -x --audio-format mp3 'https://XXX'",
    "name": "Youtube downlowd"
  },
  {
    "text": "kobayashi.hirokazu.365@gmail.com\nayumi.t.107@gmail.com",
    "name": "Scoutee ユーザーEmail"
  },
  {
    "text": "# ログイン中のアカウント一覧\ngcloud auth list\n\n# 追加\ngcloud auth login --account=<email>\n\n\n\n\n# サービスアカウントの鍵発行許可\ngcloud beta resource-manager org-policies disable-enforce \\ \n  constraints/iam.disableServiceAccountKeyCreation \\\n  --organization 139218070019",
    "name": "GCP CLI（gcloud CLI）"
  },
  {
    "text": "# 証明書周りはまとめてこれ\neas credentials",
    "name": "eas（Expo Application Service）"
  },
  {
    "text": "schtasks /Run /TN “SwitchToConsole”",
    "name": "Windows PCにセッション渡す"
  },
  {
    "text": "# miseのインストール済み\nmise list\nmise list node\n\n# mise.tomlをベースにインストール\nmise i",
    "name": "mise"
  },
  {
    "text": "#!/bin/sh\n\n# ---\n# このスクリプトは、サブディレクトリごとに .mdx ファイルを結合し、\n# 'processed' ディレクトリ内に、ディレクトリ名を冠した単一の .md ファイルを生成します。\n# ルートレベルにある .mdx ファイルも別途 'processed/root-level-files.md' にまとめます。\n# ---\n\n# 出力先ディレクトリを変数として定義\nOUTPUT_DIR=\"processed\"\n\necho \"Starting the documentation processing script...\"\necho \"==============================================\"\n\n# 出力先ディレクトリが存在しない場合に作成する\necho \"Ensuring output directory '$OUTPUT_DIR' exists...\"\nmkdir -p \"$OUTPUT_DIR\"\n\n# 1. 各サブディレクトリ内のmdxファイルを結合して、ディレクトリ名の.mdファイルを作成\nfor dir in */; do\n  # ディレクトリとして存在し、かつmdxファイルが1つでも存在するかチェック\n  if [ -d \"$dir\" ] && [ -n \"$(find \"$dir\" -name '*.mdx' -print -quit)\" ]; then\n    OUTPUT_FILE=\"${dir%/}.md\"\n    echo \"Processing directory: ${dir%/} -> $OUTPUT_DIR/$OUTPUT_FILE\"\n    find \"$dir\" -name \"*.mdx\" -print0 | xargs -0 cat > \"$OUTPUT_DIR/$OUTPUT_FILE\"\n  else\n    if [ -d \"$dir\" ] && [ \"$dir\" != \"$OUTPUT_DIR/\" ]; then\n      echo \"Skipping directory with no .mdx files: ${dir%/}\"\n    fi\n  fi\ndone\n\n# 2. カレントディレクトリ直下のmdxファイル（どのサブディレクトリにも属さないもの）を結合\necho \"----------------------------------------------\"\necho \"Processing root-level files...\"\nif [ -n \"$(find . -maxdepth 1 -name '*.mdx' -print -quit)\" ]; then\n  OUTPUT_FILE=\"root-level-files.md\"\n  find . -maxdepth 1 -name \"*.mdx\" -print0 | xargs -0 cat > \"$OUTPUT_DIR/$OUTPUT_FILE\"\n  echo \"Created $OUTPUT_DIR/$OUTPUT_FILE\"\nelse\n  echo \"No root-level .mdx files found.\"\nfi\n\necho \"==============================================\"\necho \"Script finished successfully. All files are in the '$OUTPUT_DIR' directory.\"",
    "name": "process docs script"
  },
  {
    "text": "# dev環境のsecret\ninfisical secrets\ninfisical secrets --env prod\n\n# 作成\ninfisical secrets set HOGE=fuga --env prod",
    "name": "infisical"
  },
  {
    "text": "find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' + && find . -name \"package-lock.json\" -type f -delete",
    "name": "node_modules全削除"
  }
]
